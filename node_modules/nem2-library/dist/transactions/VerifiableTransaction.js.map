{"version":3,"sources":["../../src/transactions/VerifiableTransaction.js"],"names":["KeyPair","require","VerifiableTransaction","bytes","schema","keyPair","generationHash","generationHashBytes","Array","from","convert","hexToUint8","byteBuffer","serialize","signingBytes","concat","slice","keyPairEncoded","createKeyPairFromPrivateKeyString","privateKey","signature","sign","Uint8Array","signedTransactionBuffer","splice","publicKey","length","payload","uint8ToHex","hash","createTransactionHash","parentHash","signer","_signer","resultBytes","transactionPayload","sha3Hasher","func"],"mappings":"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","file":"VerifiableTransaction.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport convert from '../coders/convert';\nimport sha3Hasher from '../crypto/sha3Hasher';\n\nconst KeyPair = require('../crypto/keyPair');\n\n/**\n * VerifiableTransaction\n * @module transactions/VerifiableTransaction\n * @version 1.0.0\n */\nexport default class VerifiableTransaction {\n\t/**\n\t * @constructor\n\t * @param {Uint8Array} bytes Uint8Array after flatbuffers.build.asUint8Array()\n\t * @param {module:schema/Schema} schema Schema definition corresponding to flatbuffer Schema\n\t */\n\tconstructor(bytes, schema) {\n\t\tthis.bytes = bytes;\n\t\tthis.schema = schema;\n\t}\n\n\t/**\n\t * @param {string} transactionPayload HexString Payload\n\t * @param {string} generationHash Network generation hash byte\n\t * @returns {*|string} Returns Transaction Payload hash\n\t */\n\tstatic createTransactionHash(transactionPayload, generationHash) {\n\t\tconst byteBuffer = Array.from(convert.hexToUint8(transactionPayload));\n\t\tconst signingBytes = byteBuffer\n\t\t\t.slice(4, 36)\n\t\t\t.concat(byteBuffer\n\t\t\t\t.slice(4 + 64, 4 + 64 + 32))\n\t\t\t.concat(generationHash)\n\t\t\t.concat(byteBuffer\n\t\t\t\t.splice(4 + 64 + 32, byteBuffer.length));\n\n\t\tconst hash = new Uint8Array(32);\n\n\t\tsha3Hasher.func(hash, signingBytes, 32);\n\n\t\treturn convert.uint8ToHex(hash);\n\t}\n\n\t/**\n\t * @param {KeyPair } keyPair KeyPair instance\n\t * @param {string} generationHash Network generation hash hex\n\t * @returns {module:model/TransactionPayload} - Signed Transaction Payload\n\t */\n\tsignTransaction(keyPair, generationHash) {\n\t\tconst generationHashBytes = Array.from(convert.hexToUint8(generationHash));\n\t\tconst byteBuffer = this.serialize();\n\t\tconst signingBytes = generationHashBytes.concat(byteBuffer.slice(4 + 64 + 32));\n\t\tconst keyPairEncoded = KeyPair.createKeyPairFromPrivateKeyString(keyPair.privateKey);\n\t\tconst signature = Array.from(KeyPair.sign(keyPair, new Uint8Array(signingBytes)));\n\t\tconst signedTransactionBuffer = byteBuffer\n\t\t\t.splice(0, 4)\n\t\t\t.concat(signature)\n\t\t\t.concat(Array.from(keyPairEncoded.publicKey))\n\t\t\t.concat(byteBuffer\n\t\t\t\t.splice(64 + 32, byteBuffer.length));\n\t\tconst payload = convert.uint8ToHex(signedTransactionBuffer);\n\t\treturn {\n\t\t\tpayload,\n\t\t\thash: VerifiableTransaction.createTransactionHash(payload, generationHashBytes)\n\t\t};\n\t}\n\n\tserialize() {\n\t\treturn this.schema.serialize(Array.from(this.bytes));\n\t}\n\n\t/**\n\t * @returns {string} - Serialized Transaction Payload\n\t */\n\tserializeUnsignedTransaction() {\n\t\treturn convert.uint8ToHex(this.serialize());\n\t}\n\n\t/**\n\t * @param {KeyPair} keyPair KeyPair instance\n\t * @returns {module:model/TransactionPayload} Returns TransactionPayload instance\n\t */\n\tsignCosignatoriesTransaction(keyPair) {\n\t\tconst signature = KeyPair.sign(keyPair, new Uint8Array(this.bytes));\n\t\treturn {\n\t\t\tparentHash: convert.uint8ToHex(this.bytes),\n\t\t\tsignature: convert.uint8ToHex(signature),\n\t\t\tsigner: keyPair.publicKey\n\t\t};\n\t}\n\n\t/**\n\t * Converts the transaction into AggregateTransaction compatible\n\t * @param {string} [_signer] Signer public key\n\t * @returns {Array.<*>} AggregateTransaction bytes\n\t */\n\ttoAggregateTransaction(_signer) {\n\t\tconst signer = convert.hexToUint8(_signer);\n\t\tlet resultBytes = this.schema.serialize(Array.from(this.bytes));\n\t\tresultBytes.splice(0, 4 + 64 + 32);\n\t\tresultBytes = Array.from(signer).concat(resultBytes);\n\t\tresultBytes.splice(32 + 2 + 2, 16);\n\t\treturn Array.from((new Uint8Array([\n\t\t\t(resultBytes.length + 4 & 0x000000ff),\n\t\t\t(resultBytes.length + 4 & 0x0000ff00) >> 8,\n\t\t\t(resultBytes.length + 4 & 0x00ff0000) >> 16,\n\t\t\t(resultBytes.length + 4 & 0xff000000) >> 24\n\t\t]))).concat(resultBytes);\n\t}\n}\n"]}
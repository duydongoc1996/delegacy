{"version":3,"sources":["../../src/api/BlockRoutesApi.js"],"names":["BlockRoutesApi","apiClient","ApiClient","instance","height","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","BlockInfoDTO","callApi","getBlockByHeightWithHttpInfo","then","response_and_data","data","StatementsDTO","getBlockReceiptsWithHttpInfo","opts","TransactionInfoDTO","getBlockTransactionsWithHttpInfo","limit","getBlocksByHeightWithLimitWithHttpInfo","hash","MerkleProofInfoDTO","getMerkleReceiptsWithHttpInfo","getMerkleTransactionWithHttpInfo"],"mappings":"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","file":"BlockRoutesApi.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Catapult REST API Reference\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.7.15\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport BlockInfoDTO from '../model/BlockInfoDTO';\nimport MerkleProofInfoDTO from '../model/MerkleProofInfoDTO';\nimport StatementsDTO from '../model/StatementsDTO';\nimport TransactionInfoDTO from '../model/TransactionInfoDTO';\n\n/**\n* BlockRoutes service.\n* @module api/BlockRoutesApi\n* @version 0.7.15\n*/\nexport default class BlockRoutesApi {\n\n    /**\n    * Constructs a new BlockRoutesApi. \n    * @alias module:api/BlockRoutesApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Get block information\n     * Gets a block from the chain that has the given height.\n     * @param {Number} height The height of the block.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BlockInfoDTO} and HTTP response\n     */\n    getBlockByHeightWithHttpInfo(height) {\n      let postBody = null;\n\n      // verify the required parameter 'height' is set\n      if (height === undefined || height === null) {\n        throw new Error(\"Missing the required parameter 'height' when calling getBlockByHeight\");\n      }\n\n\n      let pathParams = {\n        'height': height\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = BlockInfoDTO;\n\n      return this.apiClient.callApi(\n        '/block/{height}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get block information\n     * Gets a block from the chain that has the given height.\n     * @param {Number} height The height of the block.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BlockInfoDTO}\n     */\n    getBlockByHeight(height) {\n      return this.getBlockByHeightWithHttpInfo(height)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get receipts from a block\n     * Returns the receipts linked to a block.\n     * @param {Number} height The height of the block.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StatementsDTO} and HTTP response\n     */\n    getBlockReceiptsWithHttpInfo(height) {\n      let postBody = null;\n\n      // verify the required parameter 'height' is set\n      if (height === undefined || height === null) {\n        throw new Error(\"Missing the required parameter 'height' when calling getBlockReceipts\");\n      }\n\n\n      let pathParams = {\n        'height': height\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = StatementsDTO;\n\n      return this.apiClient.callApi(\n        '/block/{height}/receipts', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get receipts from a block\n     * Returns the receipts linked to a block.\n     * @param {Number} height The height of the block.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatementsDTO}\n     */\n    getBlockReceipts(height) {\n      return this.getBlockReceiptsWithHttpInfo(height)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get transactions from a block\n     * Returns an array of transactions included in a block for a given block height.\n     * @param {Number} height The height of the block.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionInfoDTO>} and HTTP response\n     */\n    getBlockTransactionsWithHttpInfo(height, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'height' is set\n      if (height === undefined || height === null) {\n        throw new Error(\"Missing the required parameter 'height' when calling getBlockTransactions\");\n      }\n\n\n      let pathParams = {\n        'height': height\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [TransactionInfoDTO];\n\n      return this.apiClient.callApi(\n        '/block/{height}/transactions', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get transactions from a block\n     * Returns an array of transactions included in a block for a given block height.\n     * @param {Number} height The height of the block.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionInfoDTO>}\n     */\n    getBlockTransactions(height, opts) {\n      return this.getBlockTransactionsWithHttpInfo(height, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get blocks information\n     * Gets up to limit number of blocks after given block height.\n     * @param {Number} height The height of the block. If height -1 is not a multiple of the limit provided, the inferior closest multiple + 1 is used instead.\n     * @param {Number} limit The number of blocks to be returned.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BlockInfoDTO>} and HTTP response\n     */\n    getBlocksByHeightWithLimitWithHttpInfo(height, limit) {\n      let postBody = null;\n\n      // verify the required parameter 'height' is set\n      if (height === undefined || height === null) {\n        throw new Error(\"Missing the required parameter 'height' when calling getBlocksByHeightWithLimit\");\n      }\n\n      // verify the required parameter 'limit' is set\n      if (limit === undefined || limit === null) {\n        throw new Error(\"Missing the required parameter 'limit' when calling getBlocksByHeightWithLimit\");\n      }\n\n\n      let pathParams = {\n        'height': height,\n        'limit': limit\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [BlockInfoDTO];\n\n      return this.apiClient.callApi(\n        '/blocks/{height}/limit/{limit}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get blocks information\n     * Gets up to limit number of blocks after given block height.\n     * @param {Number} height The height of the block. If height -1 is not a multiple of the limit provided, the inferior closest multiple + 1 is used instead.\n     * @param {Number} limit The number of blocks to be returned.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BlockInfoDTO>}\n     */\n    getBlocksByHeightWithLimit(height, limit) {\n      return this.getBlocksByHeightWithLimitWithHttpInfo(height, limit)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the merkle path for a given a receipt statement hash and block\n     * Returns the merkle path for a receipt statement or resolution linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block. \n     * @param {Number} height The height of the block.\n     * @param {String} hash The hash of the receipt statement or resolution.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerkleProofInfoDTO} and HTTP response\n     */\n    getMerkleReceiptsWithHttpInfo(height, hash) {\n      let postBody = null;\n\n      // verify the required parameter 'height' is set\n      if (height === undefined || height === null) {\n        throw new Error(\"Missing the required parameter 'height' when calling getMerkleReceipts\");\n      }\n\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling getMerkleReceipts\");\n      }\n\n\n      let pathParams = {\n        'height': height,\n        'hash': hash\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = MerkleProofInfoDTO;\n\n      return this.apiClient.callApi(\n        '/block/{height}/receipt/{hash}/merkle', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the merkle path for a given a receipt statement hash and block\n     * Returns the merkle path for a receipt statement or resolution linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block. \n     * @param {Number} height The height of the block.\n     * @param {String} hash The hash of the receipt statement or resolution.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerkleProofInfoDTO}\n     */\n    getMerkleReceipts(height, hash) {\n      return this.getMerkleReceiptsWithHttpInfo(height, hash)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the merkle path for a given a transaction and block\n     * Returns the merkle path for a transaction included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block. \n     * @param {Number} height The height of the block.\n     * @param {String} hash The hash of the transaction.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerkleProofInfoDTO} and HTTP response\n     */\n    getMerkleTransactionWithHttpInfo(height, hash) {\n      let postBody = null;\n\n      // verify the required parameter 'height' is set\n      if (height === undefined || height === null) {\n        throw new Error(\"Missing the required parameter 'height' when calling getMerkleTransaction\");\n      }\n\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling getMerkleTransaction\");\n      }\n\n\n      let pathParams = {\n        'height': height,\n        'hash': hash\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = MerkleProofInfoDTO;\n\n      return this.apiClient.callApi(\n        '/block/{height}/transaction/{hash}/merkle', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the merkle path for a given a transaction and block\n     * Returns the merkle path for a transaction included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block. \n     * @param {Number} height The height of the block.\n     * @param {String} hash The hash of the transaction.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerkleProofInfoDTO}\n     */\n    getMerkleTransaction(height, hash) {\n      return this.getMerkleTransactionWithHttpInfo(height, hash)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}
{"version":3,"sources":["../../src/api/AccountRoutesApi.js"],"names":["AccountRoutesApi","apiClient","ApiClient","instance","accountId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","AccountInfoDTO","callApi","getAccountInfoWithHttpInfo","then","response_and_data","data","MultisigAccountInfoDTO","getAccountMultisigWithHttpInfo","MultisigAccountGraphInfoDTO","getAccountMultisigGraphWithHttpInfo","AccountPropertiesInfoDTO","getAccountPropertiesWithHttpInfo","accounstIds","getAccountPropertiesFromAccountsWithHttpInfo","accountsIds","getAccountsInfoWithHttpInfo","accountIds","AccountNamesDTO","getAccountsNamesWithHttpInfo","publicKey","opts","TransactionInfoDTO","incomingTransactionsWithHttpInfo","outgoingTransactionsWithHttpInfo","partialTransactionsWithHttpInfo","transactionsWithHttpInfo","unconfirmedTransactionsWithHttpInfo"],"mappings":"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","file":"AccountRoutesApi.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Catapult REST API Reference\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.7.15\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport AccountInfoDTO from '../model/AccountInfoDTO';\nimport AccountNamesDTO from '../model/AccountNamesDTO';\nimport AccountPropertiesInfoDTO from '../model/AccountPropertiesInfoDTO';\nimport AccountsIds from '../model/AccountsIds';\nimport MultisigAccountGraphInfoDTO from '../model/MultisigAccountGraphInfoDTO';\nimport MultisigAccountInfoDTO from '../model/MultisigAccountInfoDTO';\nimport TransactionInfoDTO from '../model/TransactionInfoDTO';\n\n/**\n* AccountRoutes service.\n* @module api/AccountRoutesApi\n* @version 0.7.15\n*/\nexport default class AccountRoutesApi {\n\n    /**\n    * Constructs a new AccountRoutesApi. \n    * @alias module:api/AccountRoutesApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Get account information\n     * Returns the account information.\n     * @param {String} accountId The public key or address of the account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountInfoDTO} and HTTP response\n     */\n    getAccountInfoWithHttpInfo(accountId) {\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getAccountInfo\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = AccountInfoDTO;\n\n      return this.apiClient.callApi(\n        '/account/{accountId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get account information\n     * Returns the account information.\n     * @param {String} accountId The public key or address of the account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountInfoDTO}\n     */\n    getAccountInfo(accountId) {\n      return this.getAccountInfoWithHttpInfo(accountId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get multisig account information\n     * Returns the multisig account information.\n     * @param {String} accountId The public key or address of the account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MultisigAccountInfoDTO} and HTTP response\n     */\n    getAccountMultisigWithHttpInfo(accountId) {\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getAccountMultisig\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = MultisigAccountInfoDTO;\n\n      return this.apiClient.callApi(\n        '/account/{accountId}/multisig', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get multisig account information\n     * Returns the multisig account information.\n     * @param {String} accountId The public key or address of the account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MultisigAccountInfoDTO}\n     */\n    getAccountMultisig(accountId) {\n      return this.getAccountMultisigWithHttpInfo(accountId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get multisig account graph information\n     * Returns the multisig account graph.\n     * @param {String} accountId The public key or address of the account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MultisigAccountGraphInfoDTO>} and HTTP response\n     */\n    getAccountMultisigGraphWithHttpInfo(accountId) {\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getAccountMultisigGraph\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [MultisigAccountGraphInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/{accountId}/multisig/graph', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get multisig account graph information\n     * Returns the multisig account graph.\n     * @param {String} accountId The public key or address of the account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MultisigAccountGraphInfoDTO>}\n     */\n    getAccountMultisigGraph(accountId) {\n      return this.getAccountMultisigGraphWithHttpInfo(accountId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get account configurable properties information\n     * Returns the configurable properties for a given account.\n     * @param {String} accountId The public key or address of the account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountPropertiesInfoDTO} and HTTP response\n     */\n    getAccountPropertiesWithHttpInfo(accountId) {\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getAccountProperties\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = AccountPropertiesInfoDTO;\n\n      return this.apiClient.callApi(\n        '/account/{accountId}/properties/', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get account configurable properties information\n     * Returns the configurable properties for a given account.\n     * @param {String} accountId The public key or address of the account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountPropertiesInfoDTO}\n     */\n    getAccountProperties(accountId) {\n      return this.getAccountPropertiesWithHttpInfo(accountId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get account properties for given array of addresses\n     * Returns the configurable properties for a given array of addresses.\n     * @param {module:model/AccountsIds} accounstIds \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AccountPropertiesInfoDTO>} and HTTP response\n     */\n    getAccountPropertiesFromAccountsWithHttpInfo(accounstIds) {\n      let postBody = accounstIds;\n\n      // verify the required parameter 'accounstIds' is set\n      if (accounstIds === undefined || accounstIds === null) {\n        throw new Error(\"Missing the required parameter 'accounstIds' when calling getAccountPropertiesFromAccounts\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [AccountPropertiesInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/properties', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get account properties for given array of addresses\n     * Returns the configurable properties for a given array of addresses.\n     * @param {module:model/AccountsIds} accounstIds \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AccountPropertiesInfoDTO>}\n     */\n    getAccountPropertiesFromAccounts(accounstIds) {\n      return this.getAccountPropertiesFromAccountsWithHttpInfo(accounstIds)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get accounts information\n     * Returns the account information for an array of accounts.\n     * @param {module:model/AccountsIds} accountsIds \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AccountInfoDTO>} and HTTP response\n     */\n    getAccountsInfoWithHttpInfo(accountsIds) {\n      let postBody = accountsIds;\n\n      // verify the required parameter 'accountsIds' is set\n      if (accountsIds === undefined || accountsIds === null) {\n        throw new Error(\"Missing the required parameter 'accountsIds' when calling getAccountsInfo\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [AccountInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get accounts information\n     * Returns the account information for an array of accounts.\n     * @param {module:model/AccountsIds} accountsIds \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AccountInfoDTO>}\n     */\n    getAccountsInfo(accountsIds) {\n      return this.getAccountsInfoWithHttpInfo(accountsIds)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get readable names for a set of accountIds.\n     * Returns friendly names for accounts.\n     * @param {module:model/AccountsIds} accountIds \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AccountNamesDTO>} and HTTP response\n     */\n    getAccountsNamesWithHttpInfo(accountIds) {\n      let postBody = accountIds;\n\n      // verify the required parameter 'accountIds' is set\n      if (accountIds === undefined || accountIds === null) {\n        throw new Error(\"Missing the required parameter 'accountIds' when calling getAccountsNames\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [AccountNamesDTO];\n\n      return this.apiClient.callApi(\n        '/account/names', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get readable names for a set of accountIds.\n     * Returns friendly names for accounts.\n     * @param {module:model/AccountsIds} accountIds \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AccountNamesDTO>}\n     */\n    getAccountsNames(accountIds) {\n      return this.getAccountsNamesWithHttpInfo(accountIds)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get incoming transactions\n     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. \n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionInfoDTO>} and HTTP response\n     */\n    incomingTransactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling incomingTransactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id'],\n        'ordering': opts['ordering']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [TransactionInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions/incoming', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get incoming transactions\n     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. \n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionInfoDTO>}\n     */\n    incomingTransactions(publicKey, opts) {\n      return this.incomingTransactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get outgoing transactions\n     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.\n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionInfoDTO>} and HTTP response\n     */\n    outgoingTransactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling outgoingTransactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id'],\n        'ordering': opts['ordering']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [TransactionInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions/outgoing', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get outgoing transactions\n     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.\n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionInfoDTO>}\n     */\n    outgoingTransactions(publicKey, opts) {\n      return this.outgoingTransactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get aggregate bonded transactions information\n     * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. \n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionInfoDTO>} and HTTP response\n     */\n    partialTransactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling partialTransactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id'],\n        'ordering': opts['ordering']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [TransactionInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions/partial', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get aggregate bonded transactions information\n     * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. \n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionInfoDTO>}\n     */\n    partialTransactions(publicKey, opts) {\n      return this.partialTransactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get confirmed transactions\n     * Gets an array of transactions for which an account is the sender or receiver.\n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionInfoDTO>} and HTTP response\n     */\n    transactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling transactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id'],\n        'ordering': opts['ordering']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [TransactionInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get confirmed transactions\n     * Gets an array of transactions for which an account is the sender or receiver.\n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionInfoDTO>}\n     */\n    transactions(publicKey, opts) {\n      return this.transactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get unconfirmed transactions\n     * Gets the array of transactions not included in a block where an account is the sender or receiver. \n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionInfoDTO>} and HTTP response\n     */\n    unconfirmedTransactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling unconfirmedTransactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id'],\n        'ordering': opts['ordering']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [TransactionInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions/unconfirmed', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get unconfirmed transactions\n     * Gets the array of transactions not included in a block where an account is the sender or receiver. \n     * @param {String} publicKey The public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of transactions to return for each request. (default to 10)\n     * @param {String} opts.id The transaction id up to which transactions are returned. \n     * @param {String} opts.ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (default to -id)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionInfoDTO>}\n     */\n    unconfirmedTransactions(publicKey, opts) {\n      return this.unconfirmedTransactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}
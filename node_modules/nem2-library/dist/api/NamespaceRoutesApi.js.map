{"version":3,"sources":["../../src/api/NamespaceRoutesApi.js"],"names":["NamespaceRoutesApi","apiClient","ApiClient","instance","namespaceId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","NamespaceInfoDTO","callApi","getNamespaceWithHttpInfo","then","response_and_data","data","accountId","opts","getNamespacesFromAccountWithHttpInfo","accountsIds","getNamespacesFromAccountsWithHttpInfo","NamespaceNameDTO","getNamespacesNamesWithHttpInfo"],"mappings":"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","file":"NamespaceRoutesApi.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Catapult REST API Reference\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.7.15\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport AccountsIds from '../model/AccountsIds';\nimport NamespaceIds from '../model/NamespaceIds';\nimport NamespaceInfoDTO from '../model/NamespaceInfoDTO';\nimport NamespaceNameDTO from '../model/NamespaceNameDTO';\n\n/**\n* NamespaceRoutes service.\n* @module api/NamespaceRoutesApi\n* @version 0.7.15\n*/\nexport default class NamespaceRoutesApi {\n\n    /**\n    * Constructs a new NamespaceRoutesApi. \n    * @alias module:api/NamespaceRoutesApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Get namespace information\n     * Gets the namespace for a given namespaceId.\n     * @param {String} namespaceId The namespace identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NamespaceInfoDTO} and HTTP response\n     */\n    getNamespaceWithHttpInfo(namespaceId) {\n      let postBody = null;\n\n      // verify the required parameter 'namespaceId' is set\n      if (namespaceId === undefined || namespaceId === null) {\n        throw new Error(\"Missing the required parameter 'namespaceId' when calling getNamespace\");\n      }\n\n\n      let pathParams = {\n        'namespaceId': namespaceId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = NamespaceInfoDTO;\n\n      return this.apiClient.callApi(\n        '/namespace/{namespaceId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get namespace information\n     * Gets the namespace for a given namespaceId.\n     * @param {String} namespaceId The namespace identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NamespaceInfoDTO}\n     */\n    getNamespace(namespaceId) {\n      return this.getNamespaceWithHttpInfo(namespaceId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get namespaces owned by an account\n     * Gets an array of namespaces for a given account address.\n     * @param {String} accountId The address or public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of namespaces to return.\n     * @param {String} opts.id The namespace id up to which namespace objects are returned.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NamespaceInfoDTO>} and HTTP response\n     */\n    getNamespacesFromAccountWithHttpInfo(accountId, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getNamespacesFromAccount\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [NamespaceInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/{accountId}/namespaces', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get namespaces owned by an account\n     * Gets an array of namespaces for a given account address.\n     * @param {String} accountId The address or public key of the account.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of namespaces to return.\n     * @param {String} opts.id The namespace id up to which namespace objects are returned.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NamespaceInfoDTO>}\n     */\n    getNamespacesFromAccount(accountId, opts) {\n      return this.getNamespacesFromAccountWithHttpInfo(accountId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get namespaces for given array of addresses\n     * Gets namespaces for a given array of addresses.\n     * @param {module:model/AccountsIds} accountsIds \n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of namespaces to return.\n     * @param {String} opts.id The namespace id up to which namespace objects are returned.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NamespaceInfoDTO>} and HTTP response\n     */\n    getNamespacesFromAccountsWithHttpInfo(accountsIds, opts) {\n      opts = opts || {};\n      let postBody = accountsIds;\n\n      // verify the required parameter 'accountsIds' is set\n      if (accountsIds === undefined || accountsIds === null) {\n        throw new Error(\"Missing the required parameter 'accountsIds' when calling getNamespacesFromAccounts\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [NamespaceInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/namespaces', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get namespaces for given array of addresses\n     * Gets namespaces for a given array of addresses.\n     * @param {module:model/AccountsIds} accountsIds \n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The number of namespaces to return.\n     * @param {String} opts.id The namespace id up to which namespace objects are returned.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NamespaceInfoDTO>}\n     */\n    getNamespacesFromAccounts(accountsIds, opts) {\n      return this.getNamespacesFromAccountsWithHttpInfo(accountsIds, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get readable names for a set of namespaces\n     * Returns friendly names for mosaics.\n     * @param {module:model/NamespaceIds} accountsIds \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NamespaceNameDTO>} and HTTP response\n     */\n    getNamespacesNamesWithHttpInfo(accountsIds) {\n      let postBody = accountsIds;\n\n      // verify the required parameter 'accountsIds' is set\n      if (accountsIds === undefined || accountsIds === null) {\n        throw new Error(\"Missing the required parameter 'accountsIds' when calling getNamespacesNames\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [NamespaceNameDTO];\n\n      return this.apiClient.callApi(\n        '/namespace/names', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get readable names for a set of namespaces\n     * Returns friendly names for mosaics.\n     * @param {module:model/NamespaceIds} accountsIds \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NamespaceNameDTO>}\n     */\n    getNamespacesNames(accountsIds) {\n      return this.getNamespacesNamesWithHttpInfo(accountsIds)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}